
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OrderbookServiceClient is the client API for OrderbookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderbookServiceClient interface {
	// Sends a greeting
	BuyBase(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error)
	BuyQuote(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error)
	SellBase(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error)
	SellQuote(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error)
}

type orderbookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderbookServiceClient(cc grpc.ClientConnInterface) OrderbookServiceClient {
	return &orderbookServiceClient{cc}
}

func (c *orderbookServiceClient) BuyBase(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error) {
	out := new(PricingResponse)
	err := c.cc.Invoke(ctx, "/OrderbookService/BuyBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbookServiceClient) BuyQuote(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error) {
	out := new(PricingResponse)
	err := c.cc.Invoke(ctx, "/OrderbookService/BuyQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
