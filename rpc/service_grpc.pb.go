
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OrderbookServiceClient is the client API for OrderbookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderbookServiceClient interface {
	// Sends a greeting
	BuyBase(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error)
	BuyQuote(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error)
	SellBase(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error)
	SellQuote(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error)
}

type orderbookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderbookServiceClient(cc grpc.ClientConnInterface) OrderbookServiceClient {
	return &orderbookServiceClient{cc}
}

func (c *orderbookServiceClient) BuyBase(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error) {
	out := new(PricingResponse)
	err := c.cc.Invoke(ctx, "/OrderbookService/BuyBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbookServiceClient) BuyQuote(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error) {
	out := new(PricingResponse)
	err := c.cc.Invoke(ctx, "/OrderbookService/BuyQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbookServiceClient) SellBase(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error) {
	out := new(PricingResponse)
	err := c.cc.Invoke(ctx, "/OrderbookService/SellBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbookServiceClient) SellQuote(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error) {
	out := new(PricingResponse)
	err := c.cc.Invoke(ctx, "/OrderbookService/SellQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderbookServiceServer is the server API for OrderbookService service.
// All implementations must embed UnimplementedOrderbookServiceServer
// for forward compatibility
type OrderbookServiceServer interface {
	// Sends a greeting
	BuyBase(context.Context, *PricingRequest) (*PricingResponse, error)
	BuyQuote(context.Context, *PricingRequest) (*PricingResponse, error)
	SellBase(context.Context, *PricingRequest) (*PricingResponse, error)
	SellQuote(context.Context, *PricingRequest) (*PricingResponse, error)
	mustEmbedUnimplementedOrderbookServiceServer()
}

// UnimplementedOrderbookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderbookServiceServer struct {
}

func (UnimplementedOrderbookServiceServer) BuyBase(context.Context, *PricingRequest) (*PricingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyBase not implemented")
}
func (UnimplementedOrderbookServiceServer) BuyQuote(context.Context, *PricingRequest) (*PricingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyQuote not implemented")
}
func (UnimplementedOrderbookServiceServer) SellBase(context.Context, *PricingRequest) (*PricingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellBase not implemented")
}
func (UnimplementedOrderbookServiceServer) SellQuote(context.Context, *PricingRequest) (*PricingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellQuote not implemented")
}
func (UnimplementedOrderbookServiceServer) mustEmbedUnimplementedOrderbookServiceServer() {}

// UnsafeOrderbookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderbookServiceServer will
// result in compilation errors.
type UnsafeOrderbookServiceServer interface {
	mustEmbedUnimplementedOrderbookServiceServer()
}

func RegisterOrderbookServiceServer(s *grpc.Server, srv OrderbookServiceServer) {
	s.RegisterService(&_OrderbookService_serviceDesc, srv)
}

func _OrderbookService_BuyBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServiceServer).BuyBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderbookService/BuyBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServiceServer).BuyBase(ctx, req.(*PricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderbookService_BuyQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServiceServer).BuyQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderbookService/BuyQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServiceServer).BuyQuote(ctx, req.(*PricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderbookService_SellBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServiceServer).SellBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderbookService/SellBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServiceServer).SellBase(ctx, req.(*PricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderbookService_SellQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServiceServer).SellQuote(ctx, in)
	}